setwd("~/GitHub/amr_cost/code")
---
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
library(metafor)
library(tidyverse)
library(meta)
.libPaths()
library(meta)
install.packages("meta")
.libPaths('https://cran.rstudio.com/bin/windows/contrib/4.1/meta_6.2-1.zip')
library(meta)
library(metafor)
.libPath()
.libPath()
.libPath()
setwd("~/GitHub/amr_cost/code")
---
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
library(metafor)
library(tidyverse)
library(meta)
.libPaths()
installed.packages(meta)
installed.packages("meta")
install.packages("meta")
.libPaths(C:/Program Files/R/R-4.1.3patched/library)
.libPaths("C:/Program Files/R/R-4.1.3patched/library")
library(meta)
.libPaths()
library(meta)
.libPaths()
setwd("~/GitHub/amr_cost/code")
---
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
remove.packages("meta")
install.packages("meta", dependencies = TRUE)
library(meta)
remove.packages("meta")
.libPaths()
.libPaths("C:/Program Files/R/R-4.1.3patched/library")
remove.packages("meta")
install.packages("meta", dependencies = TRUE)
library(meta)
remove.packages("meta")
install.packages("meta", dependencies = TRUE)
install.packages("meta", dependencies = TRUE)
library(meta)
remove.packages("meta")
install.packages('meta', dependencies = TRUE)
library(meta)
.libPaths()
library(meta)
library(meta)
.libPaths()
library(meta)
install.packages('meta', dependencies = TRUE)
library(meta)
install.packages("installr")
library(installr)
updateR()
library(installr)
updateR()
library(meta)
remove.packages("meta")
install.packages('meta', dependencies = TRUE)
library(meta)
setwd("~/GitHub/amr_cost/code")
---
# load libraries
library(googlesheets4)
setwd("~/GitHub/amr_cost/code")
---
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
library(metafor)
library(tidyverse)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/amr_cost")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
setwd("~/GitHub/amr_cost/code")
---
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
library(metafor)
library(tidyverse)
# remove all objects from workspace
rm (list = ls ())
language = EN
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
s
$ export LANG=en_US.UTF-8
export LANG=en_US.UTF-8
l
Sys.setlocale("LC_ALL","English")
setwd("~/Documents/GitHub/amr_cost/code")
setwd("~/Documents/GitHub/amr_cost/code")
---
#  title: "Hospital-related costs of antibiotic-resistant enteric infections:
#  a systematic review and meta-analysis"
---
Sys.setenv(LANG = "en")
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
library(metafor)
library(tidyverse)
# remove all objects from workspace
rm (list = ls ())
# move to base directory (run code from source directory)
source_wd <- getwd ()
setwd ("../")
# -----------------------------------------------------------------------------
### Importing data from Google Sheets
dat <- data.table(read_sheet('https://docs.google.com/spreadsheets/d/1Bjl8VqHE9Cfy5pFuCunVg1IZyE_n7tVLYl86vF27UBI/edit?usp=sharing'))
---
#  title: "Hospital-related costs of antibiotic-resistant enteric infections:
#  a systematic review and meta-analysis"
---
Sys.setenv(LANG = "en")
# load libraries
library(googlesheets4)
library(data.table)
library(ggplot2)
library(tidyr)
library(gcookbook)
library(rworldmap)
library(dplyr)
library(meta)
library(metafor)
library(tidyverse)
# remove all objects from workspace
rm (list = ls ())
# move to base directory (run code from source directory)
source_wd <- getwd ()
setwd ("../")
# -----------------------------------------------------------------------------
### Importing data from Google Sheets
dat <- data.table(read_sheet('https://docs.google.com/spreadsheets/d/1Bjl8VqHE9Cfy5pFuCunVg1IZyE_n7tVLYl86vF27UBI/edit?usp=sharing'))
dat[is.na(`Should this study be included?_comment`),
`Should this study be included?_comment` := "Yes"]
dat <- dat[((`Should this study be included?` != "No") &
(`Should this study be included?_comment` != "No")),]
### pathogen
names(dat)
unique(dat$Pathogen)
# dat <- dat[((Pathogen == "E Coli" | Pathogen == "Shigella spp.")), ]
### Study data
dat_study <- dat[, c("Study", "Pathogen", "Susceptible_profile", "Resistance_profile",
"Country", "Cohort")]
# Hospitalization day data -- susceptible
dat_hos_sus <- cbind(dat_study, dat[, 49:57])
dat_hos_sus <- dat_hos_sus[(!is.na(dat_hos_sus$Susceptible_profile) &
(dat_hos_sus$`How many days did the hospitalisation last?_susceptible` != "NULL")), ]
# Hospitalization day data -- resistance
dat_hos_res <- cbind(dat_study, dat[, 58:66])
dat_hos_res <- dat_hos_res[dat_hos_res$Resistance_profile != "Susceptible" &
dat_hos_res$`How many days did the hospitalisation last?_resistant` != "NULL", ]
# Hospitalization day data
dat_hos_sus <- data.table(dat_hos_sus)
dat_hos_res <- data.table(dat_hos_res)
dat_hos_sus[, Profile := Susceptible_profile]
dat_hos_res[, Profile := Resistance_profile]
dat_hos_sus[, Category := "hos_sus"]
dat_hos_res[, Category := "hos_res"]
dat_hos_sus <- dat_hos_sus %>% rename("values" = "How many days did the hospitalisation last?_susceptible")
dat_hos_res <- dat_hos_res %>% rename("values" = "How many days did the hospitalisation last?_resistant")
# Duration of symptom -- susceptible
dat_sym_sus <- cbind(dat_study, dat[, 31:39])
dat_sym_sus <- dat_sym_sus[(!is.na(dat_sym_sus$Susceptible_profile) &
(dat_sym_sus$`How many days did the symptoms last?_susceptible` != "NULL")), ]
# Duration of symptom -- resistance
dat_sym_res <- cbind(dat_study, dat[, 40:48])
dat_sym_res <- dat_sym_res[(!is.na(dat_sym_res$Resistance_profile) &
(dat_sym_res$`How many days did the symptoms last?_resistant` != "NULL")), ]
# Duration of symptom data
dat_sym_sus <- data.table(dat_sym_sus)
dat_sym_res <- data.table(dat_sym_res)
dat_sym_sus[, Profile := Susceptible_profile]
dat_sym_res[, Profile := Resistance_profile]
dat_sym_sus[, Category := "sym_sus"]
dat_sym_res[, Category := "sym_res"]
dat_sym_sus <- dat_sym_sus %>% rename("values" = "How many days did the symptoms last?_susceptible")
dat_sym_res <- dat_sym_res %>% rename("values" = "How many days did the symptoms last?_resistant")
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Cost -- susceptible
dat_cost_sus <- dat[, c(67:68, 78:86, 96:97)]
dat_cost_sus <- cbind(dat_study, dat_cost_sus)
dat_cost_sus <- dat_cost_sus[!is.na(dat_cost_sus$`What cost was measured?`),]
dat_cost_sus <- dat_cost_sus[!is.na(dat_cost_sus$Susceptible_profile),]
# Cost -- resistance
dat_cost_res <- dat[, c(67:68, 69:77, 96:97)]
dat_cost_res <- cbind(dat_study, dat_cost_res)
dat_cost_res <- dat_cost_res[!is.na(dat_cost_res$`What cost was measured?`),]
dat_cost_res <- dat_cost_res[!is.na(dat_cost_res$Resistance_profile),]
# Cost data
dat_cost_sus <- data.table(dat_cost_sus)
dat_cost_res <- data.table(dat_cost_res)
dat_cost_sus[, Profile := Susceptible_profile]
dat_cost_res[, Profile := Resistance_profile]
dat_cost_sus[, Category := "cost_sus"]
dat_cost_res[, Category := "cost_res"]
dat_cost_sus <- dat_cost_sus %>% rename("values" = "What was the per-patient cost of treating a patient infected with a drug-susceptible pathogen or with a pathogen where resistance was not measured?")
dat_cost_res <- dat_cost_res %>% rename("values" = "What was the per-patient cost of treating a patient infected with a drug resistant pathogen?")
# re-organise
dat_cost_sus <- dat_cost_sus %>%
select(-c(`What cost was measured?`, `What cost was measured?_comment`,
`In what currency was the cost calculated?`,
`For what year was the cost calculated?`),
`What cost was measured?`, `What cost was measured?_comment`,
`In what currency was the cost calculated?`,
`For what year was the cost calculated?`)
dat_cost_res <- dat_cost_res %>%
select(-c(`What cost was measured?`, `What cost was measured?_comment`,
`In what currency was the cost calculated?`,
`For what year was the cost calculated?`),
`What cost was measured?`, `What cost was measured?_comment`,
`In what currency was the cost calculated?`,
`For what year was the cost calculated?`)
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# create function to generate table and forest plot
generate_table_plot <- function(dat, subgroup_input, width_input, height_input,
xlim_low, xlim_high,
mode, figure_name){
##  dat <- data.table(dat)
colnames(dat)[7:15] <- c("value", "statistical_measure", "comment", "uncertainty/range",
"note", "higher", "lower", "other", "n")
dat[dat == "NULL"] <- NA
dat$value  <- as.numeric(dat$value)
dat$higher <- as.numeric(dat$higher)
dat$lower  <- as.numeric(dat$lower)
dat$other  <- as.numeric(dat$other)
dat$n      <- as.numeric(dat$n)
# adjust variables
dat[statistical_measure == "Mean", Mean := value]
dat[statistical_measure == "Median", Median := value]
dat[`uncertainty/range` == "Interquartile range", higher_i := higher]
dat[`uncertainty/range` == "Interquartile range", lower_i := lower]
dat[`uncertainty/range` == "Range", higher_r := higher]
dat[`uncertainty/range` == "Range", lower_r := lower]
dat[`uncertainty/range` == "Standard deviation", SD := other]
dat[`uncertainty/range` == "Standard error", SE := other]
dat_meta <- dat[!(is.na(higher) & statistical_measure == "Median"), ]
dat_meta <- dat_meta %>% arrange(Pathogen, Profile)
# Update the "SD" column where "uncertainty/range" is "95% confidence interval" and "higher" is NA
dat_meta[(`uncertainty/range` == "95% confidence intervals" & !is.na(higher)),
SE := (higher - lower) / (2 * qnorm(0.975))]
dat_meta[(`uncertainty/range` != is.na(SE)),
SD := SE * sqrt(n)]
# meta & forestplot
ma.data <- metamean(n = n,
mean = Mean,
data = dat_meta,
sd = SD,
median = Median,
q1 = lower_i,
q3 = higher_i,
min = lower_r,
max = higher_r,
subgroup = Pathogen,
random = TRUE,
fixed = FALSE,
overall = FALSE)
# Create data table with metamean result
if(mode == "cost"){
dt <- data.table(Category       = ma.data$data$Category,
Pathogen       = ma.data$data$Pathogen,
Classification = ma.data$data$Profile,
Country        = ma.data$data$Country,
Sample_size    = ma.data$n,
Mean_value     = ma.data$mean,
Lower          = ma.data$lower,
Upper          = ma.data$upper,
Reference      = ma.data$data$Study,
Value_comment  = ma.data$data$comment,
Note           = ma.data$data$note,
Cohort         = ma.data$data$Cohort,
Cost_currency  = ma.data$data$`In what currency was the cost calculated?`,
Cost_year      = ma.data$data$`For what year was the cost calculated?`,
Cost_measure   = ma.data$data$`What cost was measured?`,
Cost_measure_c = ma.data$data$`What cost was measured?_comment`)
} else{
dt <- data.table(Category       = ma.data$data$Category,
Pathogen       = ma.data$data$Pathogen,
Classification = ma.data$data$Profile,
Country        = ma.data$data$Country,
Sample_size    = ma.data$n,
Mean_value     = ma.data$mean,
Lower          = ma.data$lower,
Upper          = ma.data$upper,
Reference      = ma.data$data$Study,
Value_comment  = ma.data$data$comment,
Note           = ma.data$data$note,
Cohort         = ma.data$data$Cohort)}
dt <- dt[order(dt$Pathogen, dt$Classification, dt$Country),]
# save the forest plot
png(file = paste(file.path("figures", figure_name)), width = width_input, height = height_input, res = 300)
if(subgroup_input == "TRUE"){
forest(ma.data,
leftcols    = c("Study", "Pathogen", "Profile", "Country"),
rightlabs   = c("Mean", "95% CI"),
subgroup    = TRUE,
xlim        = c(xlim_low, xlim_high))
} else{
forest(ma.data,
leftcols = c("Study", "Pathogen", "Profile", "Country"),
rightlabs = c("Mean", "95% CI"),
subgroup = FALSE,
xlim = c(xlim_low, xlim_high),
print.byvar = TRUE)
}
dev.off()
return(dt)}
# -----------------------------------------------------------------------------
# generate forest plot
# length of symptom
plot_sym_sus_enteric <- generate_table_plot(dat            = dat_sym_sus,
subgroup_input = "TRUE",
width_input    = 3200,
height_input   = 1300,
xlim_low       = 1,
xlim_high      = 30,
mode           = "sym",
figure_name    = "duration_of_symptom_sus_enteric.png")
setwd("~/Documents/GitHub/amr_cost/code")
setwd("~/Documents/GitHub/amr_cost/code")
